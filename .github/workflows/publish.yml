name: Publish to PyPI

on:
  push:
    tags:
      - "v*.*.*"  # Run on version tags like v1.2.3
  workflow_dispatch:    # Allows for a manual trigger in case something goes wrong
    inputs:
      version:
        description: "Version to publish (e.g. 1.2.4)"
        required: true

jobs:
  test:
    name: Run Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python -m unittest discover

  publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to access tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine toml

      - name: Determine version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            TAG_NAME=${GITHUB_REF##*/}
            VERSION=${TAG_NAME#v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update pyproject.toml version
        run: |
          python - <<EOF
          import toml
          path = "pyproject.toml"
          data = toml.load(path)
          data["project"]["version"] = "${{ steps.get_version.outputs.version }}"
          with open(path, "w") as f:
              toml.dump(data, f)
          EOF

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.get_version.outputs.version }}"
          git push origin HEAD:main

      - name: Build package
        run: python -m build

      - name: Extract GitHub Release Notes
        id: release_notes
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          prerelease: false
          body: ${{ github.event.release.body }}

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/* --verbose
